{"name": "test_demo[chrome-Google-google]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nStacktrace:\n#0 0x5598c089408a <unknown>\n#1 0x5598c0333a70 <unknown>\n#2 0x5598c036ee07 <unknown>\n#3 0x5598c03695a7 <unknown>\n#4 0x5598c03b993e <unknown>\n#5 0x5598c03b8f06 <unknown>\n#6 0x5598c03ab1b3 <unknown>\n#7 0x5598c037759b <unknown>\n#8 0x5598c0378971 <unknown>\n#9 0x5598c085925b <unknown>\n#10 0x5598c085cfa9 <unknown>\n#11 0x5598c0840339 <unknown>\n#12 0x5598c085db58 <unknown>\n#13 0x5598c0824c1f <unknown>\n#14 0x5598c0881118 <unknown>\n#15 0x5598c08812f6 <unknown>\n#16 0x5598c0893066 <unknown>\n#17 0x7f8b2fc9caa4 <unknown>\n#18 0x7f8b2fd29c3c <unknown>", "trace": "request = <SubRequest 'setup_module' for <Function test_demo[chrome-Google-google]>>\n\n    @pytest.fixture(params=['chrome'],scope='class')\n    def setup_module(request):\n        print('This is setup')\n        if request.param == 'chrome':\n        # global driver\n        #     c_options = webdriver.ChromeOptions()\n        #     c_options.add_argument(\"--start-maximized\")\n>           driver = webdriver.Chrome()\n\nconftest.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:56: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:205: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc89f476550>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: probably user data d...\\\\n#16 0x5598c0893066 \\\\u003Cunknown>\\\\n#17 0x7f8b2fc9caa4 \\\\u003Cunknown>\\\\n#18 0x7f8b2fd29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nE       Stacktrace:\nE       #0 0x5598c089408a <unknown>\nE       #1 0x5598c0333a70 <unknown>\nE       #2 0x5598c036ee07 <unknown>\nE       #3 0x5598c03695a7 <unknown>\nE       #4 0x5598c03b993e <unknown>\nE       #5 0x5598c03b8f06 <unknown>\nE       #6 0x5598c03ab1b3 <unknown>\nE       #7 0x5598c037759b <unknown>\nE       #8 0x5598c0378971 <unknown>\nE       #9 0x5598c085925b <unknown>\nE       #10 0x5598c085cfa9 <unknown>\nE       #11 0x5598c0840339 <unknown>\nE       #12 0x5598c085db58 <unknown>\nE       #13 0x5598c0824c1f <unknown>\nE       #14 0x5598c0881118 <unknown>\nE       #15 0x5598c08812f6 <unknown>\nE       #16 0x5598c0893066 <unknown>\nE       #17 0x7f8b2fc9caa4 <unknown>\nE       #18 0x7f8b2fd29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException"}, "parameters": [{"name": "setup_module", "value": "'chrome'"}, {"name": "title", "value": "'Google'"}, {"name": "url", "value": "'google'"}], "start": 1757318704278, "stop": 1757318704278, "uuid": "f24b7221-6894-4569-9b41-757392158002", "historyId": "6ed5220d44bccef945f4622d66cc56af", "testCaseId": "7605468e6e2f9acb92b6461d66fb782c", "fullName": "test_1.Test_demo#test_demo", "labels": [{"name": "tag", "value": "smoke1"}, {"name": "suite", "value": "test_1"}, {"name": "subSuite", "value": "Test_demo"}, {"name": "host", "value": "pkrvm7jw40e0xgp"}, {"name": "thread", "value": "2187-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_1"}], "titlePath": ["test_1.py", "Test_demo"]}